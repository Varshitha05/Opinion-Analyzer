# -*- coding: utf-8 -*-
"""classification_Experiment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gKlTHSO3j7liXbW4uhF0Z_dDlfT2IOu2
"""

pip install transformers torch



from transformers import BertModel, BertTokenizer
import torch

model_name = 'bert-base-uncased'
tokenizer = BertTokenizer.from_pretrained(model_name)
model = BertModel.from_pretrained(model_name)

def encode_text(text):
    # Tokenize the text, add '[CLS]' and '[SEP]', and return PyTorch tensors
    inputs = tokenizer(text, padding=True, truncation=True, max_length=512, return_tensors="pt")
    return inputs

def get_embedding(text):
    encoded_input = encode_text(text)
    with torch.no_grad():
        output = model(**encoded_input)
    embeddings = output.last_hidden_state[:, 0, :].squeeze()  # Extract [CLS] token's embeddings
    return embeddings.numpy()  # Convert to NumPy array for easier handling with SciPy

representative_texts = {
    "against": "I strongly disagree with the new abortion amendment that limits a woman's autonomy after the first trimester and imposes unnecessary restrictions on her right to make decisions about her own body later in the pregnancy",
    "for": " fully support the latest amendment to the abortion law, which responsibly delineates a woman's right to choose in the first trimester, protects her health in the second, and recognizes the viability of the fetus in the third"}
class_embeddings = {label: get_embedding(text) for label, text in representative_texts.items()}

def classify_comment(comment_embedding, class_embeddings):
    # Calculate cosine similarity (as distance) between the comment and each class
    distances = {label: 1 - cosine(comment_embedding, embedding) for label, embedding in class_embeddings.items()}
    # Classify based on the closest class
    classified_label = max(distances, key=distances.get)
    return classified_label

import pandas as pd

df = pd.read_csv('/content/cleaned_comments_1.csv')

df.head()

comments = df['Cleaned_Comments'].tolist()

from scipy.spatial.distance import cosine

# List to hold each comment and its classification
classification_results = []

# Process and classify each comment, storing results
for comment in comments:
    comment_embedding = get_embedding(comment)
    label = classify_comment(comment_embedding, class_embeddings)
    classification_results.append({"Comment": comment, "Classification": label})

# Convert to DataFrame
df_results = pd.DataFrame(classification_results)

# Display the DataFrame
print(df_results)

# Count the number of comments in each category
category_counts = df_results['Classification'].value_counts()

# Convert the counts into a DataFrame for better visualization or further analysis
df_counts = category_counts.reset_index()
df_counts.columns = ['Classification', 'Count']

# Display the counts DataFrame
print(df_counts)

df_results.to_csv("classification_results.csv", index=False)